/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import {useSpring, animated} from '@react-spring/three';

export default function Model(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/keyCap.glb')
  const [clicked, setClicked] = useState(false);
  const [hovered, setHovered] = useState(false);
  const settings = useSpring({
    position: clicked ? [0,3,0]:[0,-3,0],
    rotationKey: clicked ? [-Math.PI / 2, -0.5, 3.1]:[-Math.PI / 2, 0, 3.1],
    rotationL: clicked ? [-Math.PI / 2, -0.5, 3.1]:[-Math.PI, 0.06, 0],
    color: hovered ? '#52a6ea':'#99eeeb',
    letterScale: [0.03,0.03,0.03],
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes['3D_Text_-_R'].geometry}
        material={nodes['3D_Text_-_R'].material}
        position={[1,1,1]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_R_1'].geometry}
        material={nodes['3D_Text_-_R_1'].material}
        position={[0.04, 0.02, 0.01]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_E'].geometry}
        material={nodes['3D_Text_-_E'].material}
        position={[-0.05, 0.02, 0]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_E_1'].geometry}
        material={nodes['3D_Text_-_E_1'].material}
        position={[-0.01, 0.02, 0]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_S'].geometry}
        material={nodes['3D_Text_-_S'].material}
        position={[-0.04, 0.02, 0]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_S_1'].geometry}
        material={nodes['3D_Text_-_S_1'].material}
        position={[0.01, 0.02, 0]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_U'].geometry}
        material={nodes['3D_Text_-_U'].material}
        position={[-0.03, 0.02, 0]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_M'].geometry}
        material={nodes['3D_Text_-_M'].material}
        position={[-0.02, 0.02, 0]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_T'].geometry}
        material={nodes['3D_Text_-_T'].material}
        position={[0.01, 0.02, 0]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_T_1'].geometry}
        material={nodes['3D_Text_-_T_1'].material}
        position={[0.04, 0.02, 0.01]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <mesh
        geometry={nodes['3D_Text_-_A'].geometry}
        material={nodes['3D_Text_-_A'].material}
        position={[0.02, 0.02, 0]}
        rotation={[-Math.PI, 0.06, 0]}
        scale={settings.letterScale}
      />
      <animated.mesh
        castShadow
        geometry={nodes['Box_-_baked'].geometry}
        material={materials.Monarch}
        position={settings.position}
        rotation={settings.rotationKey}
        scale={[0.04,0.035,0.03]}
        onClick={()=>setClicked(!clicked)}
        onPointerOver={()=>setHovered(true)}
        onPointerOut={()=>setHovered(false)}
        material-color={settings.color}
      />
    </group>
  )
}

useGLTF.preload('/keyCap.glb')
